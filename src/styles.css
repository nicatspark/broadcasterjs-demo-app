@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap');

html,
::after,
::before {
  box-sizing: border-box;
}

body {
  color: #313131;
  font-family: 'Roboto mono';
}

.App {
  font-family: 'Roboto mono', sans-serif;
  text-align: center;
}

Section {
  position: relative;
  height: 300px;
  width: 300px;
  display: grid;
  place-items: center;
  border: 1px solid #000;
}

p {
  position: absolute;
  top: 0rem;
  left: 1rem;
}

.wrapper {
  display: flex;
  flex-flow: row;
  justify-content: center;
  align-items: center;
  gap: 1rem;
}

/* pie timer */
/**
 * 1. Size the pie as a 1em-wide disc, and use `font-size` to scale it
 *    up or down. This is not the only way, and it could be sized manually 
 *    if deemed preferable.
 * 2. Give a position context for the absolutely-positioned pseudo-
 *    elements.
 * 3. Give it a border so it can be visible despite being empty.
 * 4. Originally used `color` to be able to use `currentcolor`, but
 *    Safari doesnâ€™t like `currentcolor` in an animation. ðŸ¤¯
 */
.pie {
  font-size: 12px; /* 1 */
  width: 1em; /* 1 */
  height: 1em; /* 1 */
  border-radius: 50%; /* 1 */
  position: relative; /* 2 */
  border: 0.05em solid var(--color); /* 3 */
  --color: #666; /* 4 */
}
/**
 * 1. Shape both pseudo-elements as half-circles. Hiding overflow on
 *    the container and skipping border-radius on the pseudo-elements
 *    unfortunately produces glitchy results in Safari.
 * 2. Place them both on the left side of the pie.
 * 3. Make them spin from the center right point, not the middle.
 */
.pie::before,
.pie::after {
  content: '';
  width: 50%; /* 1 */
  height: 100%; /* 1 */
  border-radius: 0.5em 0 0 0.5em; /* 1 */
  position: absolute; /* 2 */
  left: 0; /* 2 */
  transform-origin: center right; /* 3 */
}

/**
  * 1. Put the masking pseudo-element on top.
  */
.pie::before {
  z-index: 1; /* 1 */
  background-color: white; /* 1 */
}

/**
  * 1. Give the spinning pseudo-element the pie color.
  */
.pie::after {
  background-color: var(--color); /* 1 */
}
/**
 * 1. Shared animation properties for both pseudo-elements.
 */
.pie::before,
.pie::after {
  animation-duration: 3s; /* 1 */
  animation-iteration-count: infinite; /* 1 */
}

/**
  * 1. We want the animation to have a single step halfway through.
  */
.pie::before {
  animation-name: mask;
  animation-timing-function: steps(1); /* 1 */
}

/**
  * 1. Make sure the rotationg is linear for the effort to work.
  */
.pie::after {
  animation-name: rotate;
  animation-timing-function: linear; /* 1 */
}

@keyframes mask {
  50%,
  100% {
    background-color: var(--color);
    transform: rotate(0.5turn);
  }
}

@keyframes rotate {
  to {
    transform: rotate(1turn);
  }
}
